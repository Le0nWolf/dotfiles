" _                                  _
"| |                                (_)
"| |     ___  ___  _ __  ___  __   ___ _ __ ___  _ __ ___
"| |    / _ \/ _ \| '_ \/ __| \ \ / / | '_ ` _ \| '__/ __|
"| |___|  __/ (_) | | | \__ \  \ V /| | | | | | | | | (__
"|______\___|\___/|_| |_|___/   \_/ |_|_| |_| |_|_|  \___|

let mapleader =","

if ! filereadable(expand('~/.vim/autoload/plug.vim'))
	echo "Downloading junegunn/vim-plug to manage plugins..."
	silent !mkdir -p ~/.vim/autoload/
	silent !mkdir -p ~/.vim/colors/
	silent !curl "https://raw.githubusercontent.com/rakr/vim-one/master/colors/one.vim" > ~/.vim/colors/one.vim
	silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ~/.vim/autoload/plug.vim
	autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/goyo.vim'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'jreybert/vimagit'
Plug 'lukesmithxyz/vimling'
"Plug 'vimwiki/vimwiki'
Plug 'bling/vim-airline'
Plug 'tpope/vim-commentary'
Plug 'kovetskiy/sxhkd-vim'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'dhruvasagar/vim-table-mode' "ASCII and Markdown Table
Plug 'airblade/vim-gitgutter' "Shows changes if working with git
Plug 'ap/vim-css-color', { 'for': 'css' }
call plug#end()

set t_Co=256
set bg=dark
set go=a
set mouse=a
set nohlsearch
set clipboard+=unnamedplus
set fileformat=unix
set number relativenumber "Setting line numbers
let NERDTreeShowHidden=1
set hls is "Making sure search highlights words as we type them
autocmd BufRead,BufNewFile,BufFilePre *.md silent! TableModeEnable "Activates Table Mode in Markdown Files silent
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!


:autocmd InsertEnter,InsertLeave * set cul! "In insert mode highlight current line
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

"Change Cursor shape in different modes
augroup myCmds
au!
autocmd VimEnter * silent !echo -ne "\e[2 q"
augroup END
set ttimeout
set ttimeoutlen=1
set ttyfast


" Some basics:
	nnoremap c "_c
	set nocompatible
	filetype plugin on
	syntax on
	set encoding=utf-8
"	set number relativenumber
" Enable autocompletion:
	set wildmode=longest,list,full
" Disables automatic commenting on newline:
	autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Goyo plugin makes text more readable when writing prose:
	map <leader>f :Goyo \| set bg=light \| set linebreak<CR>

" Spell-check set to <leader>o, 'o' for 'orthography':
	map <leader>o :setlocal spell! spelllang=en_us<CR>

" Splits open at the bottom and right, which is non-retarded, unlike vim defaults.
	set splitbelow splitright

" Nerd tree
	map <leader>n :NERDTreeToggle<CR>
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" vimling:
	nm <leader>d :call ToggleDeadKeys()<CR>
	imap <leader>d <esc>:call ToggleDeadKeys()<CR>a
	nm <leader>i :call ToggleIPA()<CR>
	imap <leader>i <esc>:call ToggleIPA()<CR>a
	nm <leader>q :call ToggleProse()<CR>

" Shortcutting split navigation, saving a keypress:
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l

" Check file in shellcheck:
	map <leader>s :!clear && shellcheck %<CR>

" Replace all is aliased to S.
	nnoremap S :%s//g<Left><Left>

" Compile document, be it groff/LaTeX/markdown/etc.
	map <leader>c :w! \| !compiler <c-r>%<CR>

" Open corresponding .pdf/.html or preview
	map <leader>p :!opout <c-r>%<CR><CR>

" Runs a script that cleans out tex build files whenever I close out of a .tex file.
	autocmd VimLeave *.tex !texclear %

" Ensure files are read as what I want:
	let g:vimwiki_ext2syntax = {'.Rmd': 'markdown', '.rmd': 'markdown','.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
	map <leader>v :VimwikiIndex
	let g:vimwiki_list = [{'path': '~/vimwiki', 'syntax': 'markdown', 'ext': '.md'}]
	autocmd BufRead,BufNewFile /tmp/calcurse*,~/.calcurse/notes/* set filetype=markdown
	autocmd BufRead,BufNewFile *.ms,*.me,*.mom,*.man set filetype=groff
	autocmd BufRead,BufNewFile *.tex set filetype=tex
	au BufRead,BufNewFile *.nginx set ft=nginx
	au BufRead,BufNewFile */etc/nginx/* set ft=nginx
	au BufRead,BufNewFile */usr/local/nginx/conf/* set ft=nginx
	au BufRead,BufNewFile nginx.conf set ft=nginx

	au BufRead,BufNewFile,BufFilePre *.md set filetype=markdown
	au BufRead,BufNewFile,BufFilePre .aliasrc set filetype=sh
	au BufRead,BufNewFile,BufFilePre .user_aliasrc set filetype=sh
	au BufRead,BufNewFile,BufFilePre .pluginrc set filetype=sh


" Save file as sudo on files that require root permission
	cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Enable Goyo by default for mutt writting
	autocmd BufRead,BufNewFile /tmp/neomutt* let g:goyo_width=80
	autocmd BufRead,BufNewFile /tmp/neomutt* :Goyo | set bg=light
	autocmd BufRead,BufNewFile /tmp/neomutt* map ZZ :Goyo\|x!<CR>
	autocmd BufRead,BufNewFile /tmp/neomutt* map ZQ :Goyo\|q!<CR>

" Automatically deletes all trailing whitespace on save.
	autocmd BufWritePre * %s/\s\+$//e


" Turns off highlighting on the bits of code that are changed, so the line that is changed is highlighted but the actual text that has changed stands out on the line and is readable.
if &diff
    highlight! link DiffText MatchParen
endif

" Set clipboard for yank copy
if system('uname -s') == "Darwin\n"
  set clipboard=unnamed "OSX
else
  set clipboard=unnamedplus "Linux
endif

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
	  if (has("nvim"))
		    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
		      let $NVIM_TUI_ENABLE_TRUE_COLOR=1
		        endif
			  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
			    "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
			      " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
			        if (has("termguicolors"))
					    set termguicolors
					      endif
				      endif


				      set background=dark " for the dark version
				      " set background=light " for the light version
				      colorscheme one
